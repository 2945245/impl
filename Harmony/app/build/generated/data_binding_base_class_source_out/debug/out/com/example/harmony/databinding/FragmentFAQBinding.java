// Generated by view binder compiler. Do not edit!
package com.example.harmony.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.harmony.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentFAQBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ConstraintLayout FAQ;

  @NonNull
  public final Button Home;

  @NonNull
  public final TextView cancel;

  @NonNull
  public final TextView faq;

  @NonNull
  public final TextView gift;

  @NonNull
  public final LinearLayout linearLayout37;

  @NonNull
  public final LinearLayout linearLayout38;

  @NonNull
  public final TextView offer;

  @NonNull
  public final TextView park;

  @NonNull
  public final TextView parking;

  @NonNull
  public final TextView pillow;

  @NonNull
  public final TextView policy;

  @NonNull
  public final TextView pregnant;

  @NonNull
  public final TextView rules;

  @NonNull
  public final TextView rules1;

  @NonNull
  public final TextView rules2;

  @NonNull
  public final TextView rules3;

  @NonNull
  public final TextView rules4;

  @NonNull
  public final TextView stud;

  @NonNull
  public final TextView students;

  private FragmentFAQBinding(@NonNull ConstraintLayout rootView, @NonNull ConstraintLayout FAQ,
      @NonNull Button Home, @NonNull TextView cancel, @NonNull TextView faq, @NonNull TextView gift,
      @NonNull LinearLayout linearLayout37, @NonNull LinearLayout linearLayout38,
      @NonNull TextView offer, @NonNull TextView park, @NonNull TextView parking,
      @NonNull TextView pillow, @NonNull TextView policy, @NonNull TextView pregnant,
      @NonNull TextView rules, @NonNull TextView rules1, @NonNull TextView rules2,
      @NonNull TextView rules3, @NonNull TextView rules4, @NonNull TextView stud,
      @NonNull TextView students) {
    this.rootView = rootView;
    this.FAQ = FAQ;
    this.Home = Home;
    this.cancel = cancel;
    this.faq = faq;
    this.gift = gift;
    this.linearLayout37 = linearLayout37;
    this.linearLayout38 = linearLayout38;
    this.offer = offer;
    this.park = park;
    this.parking = parking;
    this.pillow = pillow;
    this.policy = policy;
    this.pregnant = pregnant;
    this.rules = rules;
    this.rules1 = rules1;
    this.rules2 = rules2;
    this.rules3 = rules3;
    this.rules4 = rules4;
    this.stud = stud;
    this.students = students;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentFAQBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentFAQBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_f_a_q, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentFAQBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      ConstraintLayout FAQ = (ConstraintLayout) rootView;

      id = R.id.Home;
      Button Home = ViewBindings.findChildViewById(rootView, id);
      if (Home == null) {
        break missingId;
      }

      id = R.id.cancel;
      TextView cancel = ViewBindings.findChildViewById(rootView, id);
      if (cancel == null) {
        break missingId;
      }

      id = R.id.faq;
      TextView faq = ViewBindings.findChildViewById(rootView, id);
      if (faq == null) {
        break missingId;
      }

      id = R.id.gift;
      TextView gift = ViewBindings.findChildViewById(rootView, id);
      if (gift == null) {
        break missingId;
      }

      id = R.id.linearLayout37;
      LinearLayout linearLayout37 = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout37 == null) {
        break missingId;
      }

      id = R.id.linearLayout38;
      LinearLayout linearLayout38 = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout38 == null) {
        break missingId;
      }

      id = R.id.offer;
      TextView offer = ViewBindings.findChildViewById(rootView, id);
      if (offer == null) {
        break missingId;
      }

      id = R.id.park;
      TextView park = ViewBindings.findChildViewById(rootView, id);
      if (park == null) {
        break missingId;
      }

      id = R.id.parking;
      TextView parking = ViewBindings.findChildViewById(rootView, id);
      if (parking == null) {
        break missingId;
      }

      id = R.id.pillow;
      TextView pillow = ViewBindings.findChildViewById(rootView, id);
      if (pillow == null) {
        break missingId;
      }

      id = R.id.policy;
      TextView policy = ViewBindings.findChildViewById(rootView, id);
      if (policy == null) {
        break missingId;
      }

      id = R.id.pregnant;
      TextView pregnant = ViewBindings.findChildViewById(rootView, id);
      if (pregnant == null) {
        break missingId;
      }

      id = R.id.rules;
      TextView rules = ViewBindings.findChildViewById(rootView, id);
      if (rules == null) {
        break missingId;
      }

      id = R.id.rules1;
      TextView rules1 = ViewBindings.findChildViewById(rootView, id);
      if (rules1 == null) {
        break missingId;
      }

      id = R.id.rules2;
      TextView rules2 = ViewBindings.findChildViewById(rootView, id);
      if (rules2 == null) {
        break missingId;
      }

      id = R.id.rules3;
      TextView rules3 = ViewBindings.findChildViewById(rootView, id);
      if (rules3 == null) {
        break missingId;
      }

      id = R.id.rules4;
      TextView rules4 = ViewBindings.findChildViewById(rootView, id);
      if (rules4 == null) {
        break missingId;
      }

      id = R.id.stud;
      TextView stud = ViewBindings.findChildViewById(rootView, id);
      if (stud == null) {
        break missingId;
      }

      id = R.id.students;
      TextView students = ViewBindings.findChildViewById(rootView, id);
      if (students == null) {
        break missingId;
      }

      return new FragmentFAQBinding((ConstraintLayout) rootView, FAQ, Home, cancel, faq, gift,
          linearLayout37, linearLayout38, offer, park, parking, pillow, policy, pregnant, rules,
          rules1, rules2, rules3, rules4, stud, students);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
