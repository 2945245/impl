// Generated by view binder compiler. Do not edit!
package com.example.harmony.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.harmony.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class MypointsBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button Click;

  @NonNull
  public final EditText editTextTextPersonName6;

  @NonNull
  public final LinearLayout linearLayout26;

  @NonNull
  public final LinearLayout linearLayout27;

  @NonNull
  public final LinearLayout linearLayout28;

  @NonNull
  public final TextView txtCounter;

  private MypointsBinding(@NonNull ConstraintLayout rootView, @NonNull Button Click,
      @NonNull EditText editTextTextPersonName6, @NonNull LinearLayout linearLayout26,
      @NonNull LinearLayout linearLayout27, @NonNull LinearLayout linearLayout28,
      @NonNull TextView txtCounter) {
    this.rootView = rootView;
    this.Click = Click;
    this.editTextTextPersonName6 = editTextTextPersonName6;
    this.linearLayout26 = linearLayout26;
    this.linearLayout27 = linearLayout27;
    this.linearLayout28 = linearLayout28;
    this.txtCounter = txtCounter;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static MypointsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static MypointsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.mypoints, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static MypointsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.Click;
      Button Click = ViewBindings.findChildViewById(rootView, id);
      if (Click == null) {
        break missingId;
      }

      id = R.id.editTextTextPersonName6;
      EditText editTextTextPersonName6 = ViewBindings.findChildViewById(rootView, id);
      if (editTextTextPersonName6 == null) {
        break missingId;
      }

      id = R.id.linearLayout26;
      LinearLayout linearLayout26 = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout26 == null) {
        break missingId;
      }

      id = R.id.linearLayout27;
      LinearLayout linearLayout27 = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout27 == null) {
        break missingId;
      }

      id = R.id.linearLayout28;
      LinearLayout linearLayout28 = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout28 == null) {
        break missingId;
      }

      id = R.id.txtCounter;
      TextView txtCounter = ViewBindings.findChildViewById(rootView, id);
      if (txtCounter == null) {
        break missingId;
      }

      return new MypointsBinding((ConstraintLayout) rootView, Click, editTextTextPersonName6,
          linearLayout26, linearLayout27, linearLayout28, txtCounter);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
